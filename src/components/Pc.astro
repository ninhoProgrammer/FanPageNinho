<div id="Pc" class="fixed top-0 bottom-0 h-full w-full z-0">
    
</div>

<script>
    import * as THREE from 'three';
    //import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';
    //import { gsap } from 'gsap';
    //import { MTLLoader } from 'three/examples/jsm/loaders/MTLLoader.js';
    import { FBXLoader } from 'three/examples/jsm/loaders/FBXLoader.js';
    //import { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader.js';

    const container = document.querySelector('.relod');
    const $Cubo = document.getElementById('Pc');
    //Variables
    let w = window.innerWidth;
    let h = window.innerHeight;
    let maxScroll = document.documentElement.scrollHeight - window.innerHeight;
        
    let currentIndex = 0;
    let rotation = 0.01;
    // iniicar la escena
    const scene = new THREE.Scene();
    // iniciar la camara
    const camera = new THREE.PerspectiveCamera(75, w / h, 1, 1000);
    camera.position.z = 10;
    scene.add(camera);
    // iniciar el canvas
    //const canvas = document.createElement('three-canvas');
    // iniciar el render
    const renderer = new THREE.WebGLRenderer({alpha: true});
    renderer.setSize(w, h);
    $Cubo?.appendChild(renderer.domElement);
        
    const objAni: THREE.Mesh[] = [];
   
    const fbxLoader = new FBXLoader();
    fbxLoader.load('/OBJ/texture.fbx', (object) => {
        object.traverse((child) => {
            if (child instanceof THREE.Mesh) {
                const textureLoader = new THREE.TextureLoader();
                const texture = textureLoader.load('/OBJ/texture.png', () => {
                    texture.needsUpdate = true;
                });

                child.material = new THREE.MeshStandardMaterial({
                    map: texture,
                    roughness: 0.5,
                    metalness: 0.5,
                });

                child.material.needsUpdate = true;
                child.geometry.center();
                scene.add(object);
                objAni.push(child);
                scrollToSection(0);
            }
        });
    });

    
    /*const mtlLoader = new MTLLoader();
    mtlLoader.setPath('/OBJ/'); // Ruta donde están los archivos
    mtlLoader.load('obj.mtl', (materials) => {
        materials.preload();

        const objLoader = new OBJLoader();
        objLoader.setMaterials(materials);
        objLoader.setPath('/OBJ/');
        objLoader.load('tinker.obj', (object) => {
            object.traverse((child) => {
                if (child instanceof THREE.Mesh) {
                    child.geometry.center();
                    child.position.set(0, 0, 0);
                    child.rotation.set(0, 45, 0);
                    scene.add(object);
                    objAni.push(child);
                }
            });
        });
    });//*/

    /*const objLoader = new OBJLoader();
    objLoader.load('/OBJ/model.obj', (object) => {
        object.traverse((child) => {
            if (child instanceof THREE.Mesh) {
                //const textureLoader = new THREE.TextureLoader();
                //const texture = textureLoader.load('/OBJ/Monitor.jpg');
                //child.material.map = texture;
                child.geometry.center();
                child.position.set(0, 0, 0);
                child.rotation.set(45, 150, -25);
                scene.add(object);
                objAni.push(child);
            }
        });
    }); //*/

    /*
    let arrPositionModel = [
        {
            id: 0,
            position: {x: -120, y: 0, z: 0},
            rotation: {x: -120, y: 0, z: 0}
        },
        {
            id: 1,
            position: {x: 130, y: -115, z: 0},
            rotation: {x: 5, y: 0, z: 0}
        },
        {
            id: 2,
            position: {x: 130, y: 115, z: 0},
            rotation: {x: 5, y: 0, z: 0}
        },
        {
            id: 3,
            position: {x: 130, y: 160, z: 0},
            rotation: {x: -5, y: 0, z: 180}
        },
        {
            id: 4,
            position: {x: -120, y: -20, z: 0},
            rotation: {x: -5, y: 0, z: 180}
        }
    ];
   
    const gltfLoader = new GLTFLoader();
    let model: THREE.Object3D | null = null; //  define con un tipo Seespecífico

    gltfLoader.load(
        "/OBJ/monitor.glb",
        function (gltf) {
            model = gltf.scene;
            modelMove();
            scene.add(model);
        },
        function (xhr) {},
        function (error) {
            console.error("Error loading model:", error);
        }
    );

    const modelMove = () => {
        if (!model) return; // Evita errores si el modelo aún no se cargó

        const sections = document.querySelectorAll(".section");
        let currentSection: string | undefined;

        sections.forEach((section) => {
            const rect = section.getBoundingClientRect();
            if (rect.top <= window.innerHeight / 3) {
            currentSection = section.id;
        }
    });

    let position = arrPositionModel.findIndex(
        (item) => item.id === Number(currentSection)
    );

    if (position >= 0) {
        let new_coordinates = arrPositionModel[position];

        gsap.to(model.rotation, {
            x: new_coordinates.rotation.x,
            y: new_coordinates.rotation.y,
            z: new_coordinates.rotation.z,
            duration: 1,
            ease: "power2.inOut",
        });

        gsap.to(model.position, {
            x: new_coordinates.position.x,
            y: new_coordinates.position.y,
            z: new_coordinates.position.z,
            duration: 1,
            ease: "power2.inOut",
        });
    }
    };

    // Scroll event listener for model movement
    window.addEventListener("scroll", () => {
        console.log("scrolling");
        if (model) {
            modelMove();
        }
    });//*/
    
    const light = new THREE.DirectionalLight(0xFFFFFF, 2);
    light.position.set(0, 0, 150); // Set the light position to the object's position
    scene.add(light);
   //luz
    const ambientLight = new THREE.AmbientLight(0xFFFFFF, 1);
    scene.add(ambientLight);

    //ver el helper donde hace el enfoque de luz
    //const Helper = new THREE.DirectionalLightHelper(light, 1, 0x000000);
    //scene.add(Helper);

    // Animacion del entorno
    function animate() {
        requestAnimationFrame(animate);
        renderer.render(scene, camera);
    }

    animate();

    
    function resize() 
    {
        h = window.innerHeight;
        w = window.innerWidth;
        maxScroll = document.documentElement.scrollHeight - window.innerHeight;
        camera.aspect = w / h;
        camera.updateProjectionMatrix();
        renderer.setSize(w, h);
    }

    //Scroll event listener
    window.addEventListener('wheel', (event) => {
        if ($Cubo && !$Cubo.classList.contains('scrolling')) 
        {
            $Cubo.classList.add('scrolling');
            setTimeout(() => {
                $Cubo.classList.remove('scrolling');
                if (event.deltaY > 0) {
                    scrollToSection(currentIndex + 1);
                } else {
                    scrollToSection(currentIndex - 1);
                }
            }, 1000);
        }
    });
/*
    
//*/
    

    function scrollToSection(index: number ) 
    {
        if (index >= 0 && index < 5) 
        {
            console.log(index);
			currentIndex = index;
            if (index == 0) 
            {
                (container as HTMLElement).style.transform = `translateY(0)`;
                console.log("XD: --------------" + currentIndex + (container as HTMLElement).style.transform);
            } 
            else {
                (container as HTMLElement).style.transition = 'transform 1s';
                (container as HTMLElement).style.transform = `translateY(-${currentIndex * h}px)`;
                console.log("cure:" + (currentIndex * h) + (container as HTMLElement).style.transform);
            }
            
            switch (index) {
                case 0:
                    moveOBJ(-120, 0, 0);
                    rotationOBJ(0, 17, 0);
                    camera.position.z = 200;
                    break;
                case 1:
                    moveOBJ(130, -115, 0);
                    rotationOBJ(5, 0, 0);
                    camera.position.z = 180;
                    break;
                case 2:
                    moveOBJ(130, 115, 0);
                    rotationOBJ(5, 0, 0);
                    camera.position.z = 180;
                    break;
                case 3:
                    moveOBJ(130, 160, 0); 
                    rotationOBJ(-5, 0, 180);
                    camera.position.z = 180;
                    break;
                case 4:
                    rotationOBJ(5, 0, 0);
                    moveOBJ(0, -25, 0);
                    camera.position.z = 95;
                    break;
            }
            renderer.render(scene, camera);
		}
	}

    function moveOBJ(x: number, y: number, z: number) {
        objAni.forEach(object => {
            const duration = 1000; // duration of the animation in milliseconds
            const startX = object.position.x;
            const startY = object.position.y;
            const startZ = object.position.z;
            const deltaX = x - startX;
            const deltaY = y - startY;
            const deltaZ = z - startZ;
            const startTime = performance.now();

            function animatePosition(time: number) {
                const elapsed = time - startTime;
                const progress = Math.min(elapsed / duration, 1);
                object.position.x = startX + deltaX * progress;
                object.position.y = startY + deltaY * progress;
                object.position.z = startZ + deltaZ * progress;
                if (progress < 1) {
                    requestAnimationFrame(animatePosition);
                }
            }

            requestAnimationFrame(animatePosition);
        });
    }

    function rotationOBJ(x: number, y: number, z: number) {
    objAni.forEach(object => {
        object.rotation.set(THREE.MathUtils.degToRad(x), THREE.MathUtils.degToRad(y), THREE.MathUtils.degToRad(z));
        });
    }

    window.addEventListener('resize', () => {
        resize();
		scrollToSection(currentIndex);
	});

    window.addEventListener('resize', resize);
</script>